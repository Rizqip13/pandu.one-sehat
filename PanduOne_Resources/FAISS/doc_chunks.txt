COMP5349– Cloud Computing Week 8: CloudFormation Dr. Ying Zhou The University of Sydney 1 Table of Contents01  AWS CLI 02     Infrastructure as Code ( IaC) 03     CloudFormation Template 04     Creating Stack from AWS CLI 2  AWS command line interface AWS Services and API calls •Services are created and   managed by sending requests to the corresponding API •Through a web- based GUI like  management console •Command line interface like  AWS CLI •Programmatically via SDK •Creating an EC2 instance
Programmatically via SDK •Creating an EC2 instance •Perform an ec2:RunInstances  call  4 Data center hardware Figure 1.9 The AWS cloud is composed of hardware and software services accessible via an API. Four options of interacting with AWS •They represent different  end user interfaces of the same API •Management Console •Command line •SDK •Blueprints  5 Figure 1.12 Different ways to access the AWS API, allowing you to manage  and access AWS servicesaws s3 cp …  Management Console: manual proce
vicesaws s3 cp …  Management Console: manual process Long manual process to build an architecture AWS Management  Console YouConfigure data storage Route your network Create your instances Build your databasesAWS Cloud © 2020 Amazon Web Services, Inc. or its Affiliates. All rights reserved. 6 Risks from manual processes Does not support repeatability at scale •How will you replicate deployments to multiple Regions? No version control •How will you roll back the production environment to a prior
u roll back the production environment to a prior version? Lack of audit trails •How will you ensure compliance? How will you track changes to configuration  details at the resource level? Inconsistent data management •For example, how will you ensure matching configurations across multiple Amazon Elastic Compute Cloud (Amazon EC2) instances?  © 2020 Amazon Web Services, Inc. or its Affiliates. All rights reserved. 7 AWS CLI •A convenient way to interact with AWS from a terminal (Linux, macOS or
interact with AWS from a terminal (Linux, macOS or Windows) •Requires installation and configuration •CLI request authenticates the user by access key ID and secrete access key •A configuration process would store the information to be used by each request  •EC2 instance with Amazon AMI usually comes with the AWS CLI preinstalled and  configured •Example commands: •aws configure •aws s3 ls                   •aws ec2 describe -instances •aws cloudformation  create -stack .. 8 CLI command examples
formation  create -stack .. 8 CLI command examples aws ec2 run- instances \   --image- id ami -0ccedee93274bbb8d \   --instance- type t2.micro \   --count 1 9aws s3api create- bucket --bucket abcd1234 --region us -east-1 Infrastructure as Code (IaC ) 11IaC overview IaC is the process of writing a template that  provisions and manages your cloud resources. Human readable Machine consumableIaC template Resources Resources Resources With IaC, you can replicate, redeploy,  and repurpose infrastructu
n replicate, redeploy,  and repurpose infrastructure. 12IaC benefits Rapidly deploy complex  environments with configuration consistency. Propagate a change to all stacks  by modifying the template. Clean up by deleting the stack,  which deletes the resources  created. The key benefits are reusability,  repeatability, and maintainability.TemplateApplication Load Balancer Auto Scaling groupStack 1 Application Load Balancer Auto Scaling groupStack 2 Application Load Balancer Auto Scaling groupStac
2 Application Load Balancer Auto Scaling groupStack 3 13CloudFormation CloudFormation•Provides a simplified way to model, create, and  manage a collection of AWS resources •A collection of resources is called a CloudFormation  stack. •There is no extra charge (pay for only the resources  that you create). •Can create, update, and delete stacks •Enables orderly and predictable provisioning  and updating of resources •Enables version control of AWS resource deployments 14How CloudFormation works A
resource deployments 14How CloudFormation works Amazon Route 53 Amazon EC2Auto scaling Elastic Load Balancing  (ELB)Stack Stack TemplateAWS CloudFormation 1 Define your resources in a template , or use a  prebuilt template.2 Upload the template to  CloudFormation, or point  to a template stored in an  Amazon Simple Storage  Service (Amazon S3) bucket. Or use aws  cloudformation command3 Run a create stack  action.  Resources are created across  multiple services in your AWS account as a running
multiple services in your AWS account as a running environment.4 The stack retains control of the resources that are  created. You can later  update stack , detect  drift, or delete stack.  Stacks •A stack in AWS CloudFormation is a collection of AWS resources that can  be managed as a single unit. •Stacks are created based on CloudFormation templates •Think of template as a class and stacks as objects created based on that class •There are different ways of grouping resources into a stack •Cohe
rent ways of grouping resources into a stack •Cohesion •Lifecycle •Security •Others •A layer approach is typical: Network layer, Application Layer, Database Layer 15 CloudFormation Template 17CloudFormation template syntax Template YAML example AWSTemplateFormatVersion: 2010 -09-09 Resources:  awsexamplebucket1:    Type: AWS::S3::Bucket YAML advantages •Is optimized for readability •Is less verbose  •No brackets •quotes can be omitted most of the  time •Supports embedded commentsJSON example {
time •Supports embedded commentsJSON example {  "AWSTemplateFormatVersion": "2010 -09-09",  "Resources" : {  “awsexamplebucket1" : {  "Type" : "AWS::S3::Bucket"  }  } } JSON advantages •More widely used by other computer systems  (for example, APIs) •Usually less complex to generate and parse 18Anatomy of a CloudFormation template •When you write a CloudFormation template you  have a choice of sections to include based on your workload.  •The only required section is Resources.  Additional sec
nly required section is Resources.  Additional sections are optional.  •This example shows a YAML-formatted template fragment in the suggested order of sections.---  AWSTemplateFormatVersion : "version date"  Description :   String   Metadata:   template metadata  Parameters:    set of parameters   Rules:  set of rules   Mappings:  set of mappings   Conditions:   set of conditions   Transform:   set of transforms   Resources:    set of resources   Outputs:    set of outputs   https://docs.aws.am
Outputs:    set of outputs   https://docs.aws.amazon.com /AWSCloudFormation/latest/UserGuide/template- anatomy.html Resources •The resources section contains multiple resources •A resource has at least a name, a type, and some properties, •The property that can be included depends on the type 19Resources:    resourceName1:      Type: AWS::ServiceName::ResourceType       Properties:          Propertyname1: PropertyValue1         …   resourceName2:     Type: AWS:: ServiceName ::ReSourceType
2:     Type: AWS:: ServiceName ::ReSourceType     Properties:        Propertyname1: PropertyValue1         …          The name  or logical ID of the resource is chosen by the user The resource type is string with a given format The properties can be included depends on the resource type https:// docs.aws.amazon.com/ AWSCloudFormation /latest/ UserGuide / resources -section -structure.html 20Resources example: EC2 instance "Resources": {    "Ec2Instance": {     "Type": "AWS::EC2::Instance",    "P
stance": {     "Type": "AWS::EC2::Instance",    "Properties": {      "ImageId": "ami-9d23aeea",      "InstanceType": "m3.medium",      "KeyName": {"Ref": "KeyPair "}       }   } }   Resources :   Ec2Instance:   Type:AWS::EC2::Instance,   Properties:     ImageId:ami-9d23aeea     InstanceType :m3.medium     KeyName:        Ref:KeyPair      YAML format JSON formatA name defined in other section Parameters •The Parameters section is optional but is a powerful way to customize the  stacks created •Th
powerful way to customize the  stacks created •Think of this as defining a parameterized constructor to allow you pass arguments to  create different objects  •Typically used to specify property values of stack resources 21Parameters:   ParameterLogicalID :     Description: Information about the parameter    Type : DataType     Default: value    AllowedValues:       - value1       - value2String ,Number , or an AWS - specific parameter type https:// docs.aws.amazon.com /AWSCloudFormation/latest
s:// docs.aws.amazon.com /AWSCloudFormation/latest/ UserGuide/parameters -section- structure.html Parameter and resources example 22{  "Parameters ":{     "KeyPair":{        "Description": "SSH Key Pair",        "Type": "String"}},  "Resources": {     "Ec2Instance": {       "Type": "AWS::EC2::Instance",       "Properties": {          "ImageId":"ami-9d23aeea",          "InstanceType": "m3.medium",          "KeyName":{"Ref": "KeyPair}   }      }   }Parameters:  KeyPair:     Description: SSH Key Pa
}Parameters:  KeyPair:     Description: SSH Key Pair     Type: String Resources :   Ec2Instance:   Type:AWS::EC2::Instance,   Properties:     ImageId:ami-9d23aeea     InstanceType :m3.medium     KeyName:        Ref:KeyPair    We can also use AWS::EC2::KeyPair ::KeyName  as the type Output •It is an optional section declare the output values for the stack •Users define what data they want to pass as the output 23Outputs:     OutputLogicalID :      Description:    Value : Value to return      Expo
Description:    Value : Value to return      Export:       Name: Name of resource  to export Example intrinsic functions •Ref •Returns the value of a specified  parameter, resource, or another  intrinsic function.  •commonly used to create references  between resources within a  CloudFormation template •Fn::GetAtt  (or ! GetAtt  for YAML) •Returns the value of an attribute from  a resource. 24Parameters:   KeyPair:     Description: SSH Key Pair     Type: String Resources :   Ec2Instance:   Type
Type: String Resources :   Ec2Instance:   Type:AWS::EC2::Instance,   Properties:     ImageId:ami-9d23aeea     InstanceType :m3.medium     KeyName:        Ref:KeyPair Outputs:   ID:    Value: !Ref Ec2Instance     Description: ID of the EC2 instance created   PublicName :     Value: ! GetAtt 'EC2Instance.PublicDnsName '    Description: public DNS of the EC2    Intrinsic Functions •A list of built -in functions that can be used in the templates to assign values  to properties that are not avail
to assign values  to properties that are not available until runtime. •Basic Syntax •Fn::func_name inputs •Yaml  short form:  !func_name input(s) •Ref is also an intrinsic function  •Ref input •The returned value depends on the input specified •The value of the specified parameter orresource . •The output of a function 25 Output, parameter, resources example 26Parameters:   KeyPair:     Description: SSH Key Pair     Type: String Resources :   Ec2Instance:   Type:AWS::EC2::Instance,   Properties:
Instance:   Type:AWS::EC2::Instance,   Properties:     ImageId:ami-9d23aeea     InstanceType :m3.medium     KeyName:        Ref:KeyPair Outputs:   ID:    Value: !Ref Ec2Instance     Description: ID of the EC2 instance created   PublicName :     Value: ! GetAtt 'EC2Instance.PublicDnsName '    Description: public DNS of the EC2   {  "Parameters ":{     "KeyPair":{        "Description": "SSH Key Pair",        "Type": "String"}},  "Resources ":{     "Ec2Instance": {       "Type": "AWS::EC2::Instance
"Ec2Instance": {       "Type": "AWS::EC2::Instance",       "Properties": {          "ImageId":"ami-9d23aeea",          "InstanceType ":"m3.medium",          "KeyName":{"Ref": "KeyPair}   }      }   },  "Outputs":{     "InstanceId ":{         "Description": "InstanceId ",          "Value": {"Ref": "Ec2Instance"}  } CloudFormation template snippets •AWS provide many snippets for  various scenarios as starting point to create custom templates •https://docs.aws.amazon.com/AWSClo udFormation/latest/U
://docs.aws.amazon.com/AWSClo udFormation/latest/UserGuide/template -snippets.html 27Ec2Instance:  Type: AWS::EC2::Instance   Properties:     AvailabilityZone : aa-example-1a     ImageId: ami -1234567890abcdef0MyDB :   Type: AWS::RDS::DBInstance   Properties:     DBSecurityGroups :     - Ref: MyDbSecurityByEC2SecurityGroup     - Ref: MyDbSecurityByCIDRIPGroup     AllocatedStorage: '5'     DBInstanceClass : db.t2.small     Engine: MySQL     MasterUsername : MyName     ManageMasterUserPassword: tr
Username : MyName     ManageMasterUserPassword: true     MasterUserSecret :       KmsKeyId : !Ref KMSKey   DeletionPolicy : Snapshot Infrastructure Composer •A visual way to work with CloudFormation template 28  Creating Stacks from AWS CLI Creating Stack aws cloudformation create- stack \ --stack- name mybucket  \        --template- body file:// my_bucket.yaml // my_bucket.yaml // creating S3 buket  with default setting AWSTemplateFormatVersion: "2010-09-09"  Description: This is my first bucke
"2010-09-09"  Description: This is my first bucket Resources:   MyBucket :       Type: AWS::S3::Bucket Updating stack aws cloudformation update- stack \ --stack- name mybucket  \        --template- body file:// my_bucket.yaml 31// my_bucket.yaml AWSTemplateFormatVersion: "2010- 09-09"  Description: This is my first bucket  Resources:    MyBucket :     Type:AWS ::S3::Bucket     Properties:        AccessControl : PublicRead Supplying parameters 32AWSTemplateFormatVersion: '2010-09-09' Description
AWSTemplateFormatVersion: '2010-09-09' Description: Creates an S3 bucket with a user -provided name. Parameters:  BucketName :     Type: String     Description: The name of the S3 bucket to create.    Resources:  MyS3Bucket:     Type: AWS::S3::Bucket     Properties:      BucketName : !Ref BucketNameaws cloudformation create-stack \     --stack-name my -s3-bucket -stack \     --template-body file://s3-bucket.yaml \     --parameters ParameterKey= BucketName,ParameterValue= my-unique- bucket -name
ucketName,ParameterValue= my-unique- bucket -name CloudFormation Template Inspection Module 6 Guided Lab: Creating an Amazon RDS Database 34 A template  created most resources except the RDS Resources created ( 1 of 2) 35  36Resources created ( 2 of 2) The Infrastructure Composer view   37  The Description and Parameters AWSTemplateFormatVersion : 2010- 09-09  Description : Lab template  # Lab VPC with 2 public + 2 private subnets (RDS requires 2 AZs)  ‘ # DB Subnet Group across the 2 private su
AZs)  ‘ # DB Subnet Group across the 2 private subnets   # Role for EC2 instance to access RDS Parameters :    LatestAmiId :      Type : 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>’       Default : '/aws/service/ ami-amazon -linux -latest/al2023- ami-kernel -default -x86_64’     KeyName :      Description : Name of an existing EC2 KeyPair       Type : String 38 VPC resource map 39  Resources: VPC with  Internet Gateway 40 https:// docs.aws.amazon.com /AWSCloudFormation/latest/ UserGuide/ a
amazon.com /AWSCloudFormation/latest/ UserGuide/ aws-attribute- dependson.htmlDependsOn specifies creation order Creation of this VPCtoIGWConnection resource should occur after  the successful  creation of the resources listed under it. https:// docs.aws.amazon.com /AWSCloudFormation/latest/ UserGuide/aws - resource- ec2-vpcgatewayattachment.html Resources: public route table  Resources: Private Route table 42 Private route table only contains a default  route, no route resource is needed  Resou
default  route, no route resource is needed  Resources: one public subnet (two in total) Auto  assignment of public IP selects the first Availability Zone available in the current AWS Region.  Resources: one private subnet (two in total) CIDR block Resources: DB Subnet group This is a resource needed to create a DB instance Resources: Security Group AppSG  Resources:  EC2 !Sub is a function for variable  substitution, not very useful here | means multiline string Resources: Outputs Similar to  V
multiline string Resources: Outputs Similar to  Value: ! GetAtt  'EC2Instance.PublicIp'
Team 310 - Digital Twin of Hospital  HospiTwin  ✅ Intersystems  1Y our Hospital Operations’  AI Copilot  Track 3 - Transforming Intelligence  Source : https://people.com/health/canadian-woman-dies-after-seven-hour-wait-emergency-room/  Image created by ChatGPT (OpenAI). Allison, age 37  Presented with abdominal pain,  asked to be admitted but no  beds were available.  Consequences:  ●perforated bowels  ●peritonitis  ●sepsis  Allison died a preventable death  2 3 Getting a room at a hospital Amer
table death  2 3 Getting a room at a hospital American College of Emergency Physicians, Academy of General Dentistry, Allergy & Asthma Network, et al  Emergency department boarding crisis. American College of Emergency Physicians  https://www.acep.org/globalassets/new-pdfs/advocacy/emergency-department-boarding-crisis-sign-on-letter-11.07.22.pdf  Problem:  Delays in ED boarding  is a  public health emergency . 4 The burden of long ED boarding times  2× Mortality  rate 1.5×  Length  of stay 1.7×
es  2× Mortality  rate 1.5×  Length  of stay 1.7×  Patients  Dissatisﬁed  Loss of revenue  $30B* per  year in US  *  Extrapolated from   2017 Schreyer, K. E., & Martin, R. (2017). The Economics of an Admissions Holding Unit. The western journal of emergency medicine, 18 (4), 553–558.  https://doi.org/10.5811/westjem.2017.4.32740  Singrer AJ, Thode HC Jr, Viccellio P, Pines JM. The association between length of emergency department boarding and mortality. Acad Emerg Med .  2011;18(12):1324−1329.
rtality. Acad Emerg Med .  2011;18(12):1324−1329. doi:10.1111/j.1553−2712.2011.01236.x    5 Bottlenecks on the journey to a free bed  6 The problem is  Predictable.  Which means it’s  Preventable.  7 Solution:  HospiT win   Y our Hospital Operations’ AI Copilot  8  Architecture  Physicians Nurses Pharmacists EVSSchedule  and  Capacity EMR  Real-Time  Simulator LLM  Hospital  Process  Flow  Hospital  Operators Inputs  Central  Command  Center Process Outputs  Mobile  Application  9 Command Center
ess Outputs  Mobile  Application  9 Command Center  EMR Live tracking Prescriptive & what-if ✓ ✓ 10  Ask the LLM interface about anything.  Zero  Hallucination  11HospitT win  It also prescribes recommendations.  Prescriptive   Insights  12 HospitT win  And can even simulate “what-ifs”.  What-if   Insights  13 HospitT win  Business Model  - $2500/yr per bed subscription  - The target is hospital administrators  (COO, Nurse Managers,APIC)  Go to Market Strategy:  MVP  (market validation,  product
arket Strategy:  MVP  (market validation,  product development)   Pilot  Hospital  (2 hospitals Identiﬁed) Launch  GA  14 Aug 2025 Oct 2025 Ready for Winter  Mar to Jul 2025  Capital structure  15  Our advantage vs competitors   HT  AI based  Predictive ✔ ✔ ✔ ✔ ✔ ✔  Prescriptive ✔ x x x x x What-if  analysis ✔ x x x x x Realtime ✔ ✔ ✔ ✔ ✔ ✔  16  Source : https://people.com/health/canadian-woman-dies-after-seven-hour-wait-emergency-room/  Image created by ChatGPT (OpenAI). Because no one should
eated by ChatGPT (OpenAI). Because no one should  die waiting for a bed.  Help us save  more people like  Allison.  17   Ali Rehmatullah, CMO  Founder Kiai Digital,  Media Consultant  for Healthcare  Innovators. Prev. Athenahealth.  Muhammed Simsek, CTO  MSc, Software Development, Boston  University. BSc, Computer Science,  Sabanci University Kamila Muyasarah, MD  Chief Medical Officer  MSc-CI Harvard Medical School  Grad Researcher at Dana-Farber Nada Salem, CPO  MSc Harvard Medical School  Pol
r Nada Salem, CPO  MSc Harvard Medical School  Policy and Comms Consultant Taposh Duttaroy, CEO  Director Innovation & AI  MSEE IIT Chicago, MBA UC Davis,  MBE Harvard Medical School Sophia Borges, Chief Economist  MD-PhD, University of São Paulo, Brazil  Visiting Graduate at Harvard School of  Public Health  18 Our team:  Theme: The long onboarding time in Emergency Rooms (ER) causes delays in patient  care and ineﬃciencies in hospital operations. Team 310 - Digital Twin Hospitals  Niraj Bhatia
s. Team 310 - Digital Twin Hospitals  Niraj Bhatia ✅ Intersystems  Google Health Team Members:  ●Name 1 : Taposh Duttaroy / CEO  ●Name 2 : Ali Rehmatullah / CMO  ●Name 3 : Muhammed Enes Simsek  / CTO  ●Name 4 : Nada Salem / CPO  ●Name 5 : Sophia Borges / CMO  ●Name 6 : Kamila Muyasarah / COO  19  Our team includes:  Physicians  AI Innovators  Software Engineers  Healthcare Marketers  Policy Experts  Healthcare economists  Who’ve worked at:  Kaiser Permanente  Athenahealth  And hospital systems
r Permanente  Athenahealth  And hospital systems  around the world  Ali Rehmatullah Sophia Borges  Muhammed Simsek Kamila Muyasarah Nada Salem Taposh Duttaroy  20  Appendix  21  Schreyer, K. E., & Martin, R. (2017). The Economics of an Admissions Holding Unit. The western journal of emergency  medicine, 18 (4), 553–558. https:/ /doi.org/10.5811/westjem.2017 .4.327 40    We are targeting 5% of the market  22  Capital structure  23  Capital structure  24  Hospital  Digital  Network  Future project
re  24  Hospital  Digital  Network  Future projection  25  Real-time  Monitoring Future projection  Elapsed waiting time:  ModTheSims. (n.d.). Mondrosen’s edit: New Willow Creek hospital  [Image]. ModTheSims. https://modthesims.info/d/622084/mondrosen-s-edit-new-willow-creek-hospital-no-cc.html 01:16:13 Prolonged boarding time  Occupancy                       03/10 PICU ED 26    29  Capital structure  Bottlenecks on the journey to a free bed  30  Bottlenecks on the journey to a free bed  31  Bot
Bottlenecks on the journey to a free bed  31  Bottlenecks on the journey to a free bed  32  Bottlenecks on the journey to a free bed  33  Bottlenecks on the journey to a free bed  34  Bottlenecks on the journey to a free bed  35  Bottlenecks on the journey to a free bed  36  Bottlenecks on the journey to a free bed  37  Bottlenecks on the journey to a free bed  38  Bottlenecks on the journey to a free bed  39
